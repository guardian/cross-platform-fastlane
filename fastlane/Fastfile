# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins

private_lane :merged_prs_since_last_release do |options|

  repo = options[:repo]
  github_token = options[:github_token]
  github_label = options[:github_label]
  earliest_datetime = options[:earliest_datetime]
  
  base_branch_name = if options.has_key?(:base_branch_name)
    options[:base_branch_name]
  else
    "master"
  end

    UI.message("Base branch name: #{base_branch_name}")


  # Find all PRs that have been merged since the last beta went out
  # Don't use `sort=updated` here, because some changes (e.g. branch names, labelling) may mass-update very old PRs.
  closed_prs = github_api(
    server_url: "https://api.github.com",
    api_bearer: github_token,
    http_method: "GET",
    path: "/repos/guardian/#{repo}/pulls?state=closed&sort=created&direction=desc&per_page=100"
  )
  lane_context.delete(SharedValues::GITHUB_API_RESPONSE)
  lane_context.delete(SharedValues::GITHUB_API_JSON)

  merged_prs_since_last_labelling = closed_prs[:json].reject{ |pr|
    pr["merged_at"].nil? || # Pull request was never merged
    DateTime.parse(pr["merged_at"]) < DateTime.parse(earliest_datetime) || # Pull request was merged before the earliest date provided
    pr["labels"].map{|label| label["name"]}.include?(github_label) # Pull request was labelled as part of a previous release
  }

  PullRequest = Struct.new(:number, :title, :author, :merge_sha, :merged_at, :body)
  all_prs_since_last_labelling = merged_prs_since_last_labelling.map{ |pr|
    PullRequest.new(pr["number"], pr["title"], pr["user"]["login"], pr["merge_commit_sha"], pr["merged_at"], pr["body"])
  }

  UI.message("All PRs since last labelling #{all_prs_since_last_labelling}")

  current_branch = sh("git rev-parse --abbrev-ref HEAD")

  UI.message("Current branch: #{current_branch}")

  sh("git fetch --unshallow origin %s" % base_branch_name) # Force fetching entire commit history for target branch
  sh("git checkout %s" % base_branch_name)
  recent_commits = sh("git log --format=\"%H\" -1000", log:false).split("\n")
  
  UI.message("recent commits from tag branch: #{recent_commits}")

  sh("git checkout %s" % current_branch)

  filtered = all_prs_since_last_labelling.reject { |pr|
    !recent_commits.include?(pr.merge_sha)
  }

  UI.message("Post-rejection step: All PRs since last labelling #{filtered}")

  filtered

end

private_lane :extract_release_notes do |options|

  if options[:environment].to_s == ""
    environment = "beta"
  else
    environment = options[:environment]
  end

  prs = options[:prs]

  regex_start = "<!--#{environment}_release_notes_start-->"
  regex_end = "<!--#{environment}_release_notes_end-->"

  # Discard any PR which omits the release_notes tags
  prs_with_release_notes = prs.select { |pr|
    pr.body.include?(regex_start) && pr.body.include?(regex_end)
  }

  release_notes = prs_with_release_notes.map { |pr|
    pr.body
      .split(regex_start).last
      .split(regex_end).first
      .strip
  }

  release_notes.reject { |release_note_line| release_note_line.empty? } # Discard any blank release note messages

end

private_lane :prepare_release_notes do |options|

  environment = options[:environment]
  prs = options[:prs]
  optional_preamble = options[:preamble]
  optional_postamble = options[:postamble] # Yes, it is a real word

  release_note_bullets = extract_release_notes(environment: environment, prs: prs).map{ |release_note_line| "* #{release_note_line}" }.join("\n")

  if release_note_bullets.empty?
    "We've been fixing bugs and making improvements behind the scenes. For the best possible experience and to ensure you have access to all our latest features we recommend that you update to this latest version as soon as possible."
  else
    "#{optional_preamble}\n#{release_note_bullets}\n#{optional_postamble}"
  end

end

# This lane has sleep(1) to be a good citizen of the github API and avoid
# secondary API rate limits. From the documentation:
# > If you're making a large number of POST [...] requests for a single
# > user or client ID, wait at least one second between each request.
private_lane :update_pr_after_release do |options|

  repo = options[:repo]
  github_token = options[:github_token]
  pr_number = options[:pr_number]
  pr_author = options[:pr_author]
  full_version = options[:full_version]
  environment = options[:environment]

  UI.message("Marking PR #{pr_number} as released to #{environment}")
  sleep(1)
  github_api(
    server_url: "https://api.github.com",
    api_bearer: github_token,
    http_method: "POST",
    path: "/repos/guardian/#{repo}/issues/#{pr_number}/labels",
    body: { labels: ["released_to_#{environment}"] }
  )
  sleep(1)
  github_api(
    server_url: "https://api.github.com",
    api_bearer: github_token,
    http_method: "POST",
    path: "/repos/guardian/#{repo}/issues/#{pr_number}/comments",
    body: { body: "@#{pr_author}: these changes were released to #{environment} in version `#{full_version}`." }
  )

end

# This can be deleted in a couple of weeks, once everyone has stopped using it
private_lane :update_pr_after_beta_release do |options|

  repo = options[:repo]
  github_token = options[:github_token]
  pr_number = options[:pr_number]
  pr_author = options[:pr_author]
  build_number = options[:build_number]

  UI.message("Marking PR #{pr_number} as released to beta")
  github_api(
    server_url: "https://api.github.com",
    api_bearer: github_token,
    http_method: "POST",
    path: "/repos/guardian/#{repo}/issues/#{pr_number}/labels",
    body: { labels: ["released_to_beta"] }
  )
  github_api(
    server_url: "https://api.github.com",
    api_bearer: github_token,
    http_method: "POST",
    path: "/repos/guardian/#{repo}/issues/#{pr_number}/comments",
    body: { body: "@#{pr_author}: these changes were released to beta in version `#{build_number}`." }
  )

end

private_lane :add_tag do |options|

  repo = options[:repo]
  github_token = options[:github_token]
  commit_sha = options[:commit_sha]
  tag_name = options[:tag_name]

  UI.message("Adding tag #{tag_name} to commit #{commit_sha} for the #{repo} repo...")
  github_api(
    server_url: "https://api.github.com",
    api_bearer: github_token,
    http_method: "POST",
    path: "/repos/guardian/#{repo}/git/refs",
    body: { "ref": "refs/tags/#{tag_name}", "sha": "#{commit_sha}" }
  )

end

private_lane :find_included_templates_versions do

  recent_commits = sh("git log --format=\"%s\" -1000").split("\n")

  # Templates commit messages are like this: Update to mobile-apps-article-templates@1.0.247
  recent_templates_commits = recent_commits.select { |commit| commit.include?("Update to mobile-apps-article-templates") }
  recent_templates_version_bumps = recent_templates_commits.map { |commit|
    commit.split("\@")[1]
  }

end

private_lane :calculate_templates_release_times do |options|

  platform = options[:platform]
  update_github = options[:update_github]
  github_token = options[:github_token]
  build_number = options[:build_number]

  release_time = if options[:release_time].nil?
    UI.message("No release time specified. Assuming the release has just happened...")
    DateTime.now.new_offset(0) # Get the time in UTC
  else
    UI.message("Release time of #{options[:release_time]} was specified")
    DateTime.parse(options[:release_time])
  end

  templates_repo = "mobile-apps-article-templates"

  Tag = Struct.new(:commit_sha, :templates_version)
  PullRequestNumberWithTemplatesVersion = Struct.new(:number, :title, :author, :merge_sha, :merged_at, :templates_version)

  merged_prs = merged_prs_since_last_release(
    repo: templates_repo,
    github_token: github_token,
    github_label: "released_to_prod_#{platform}",
    earliest_datetime: "2019-10-03T09:00:00Z", # This prevents us from labelling PRs which have already been released
    ensure_git_log_includes_pr: false
  )

  tagsForTemplatesRepo = github_api(
    server_url: "https://api.github.com",
    api_bearer: github_token,
    http_method: "GET",
    path: "/repos/guardian/#{templates_repo}/tags"
  )
  lane_context.delete(SharedValues::GITHUB_API_RESPONSE)
  lane_context.delete(SharedValues::GITHUB_API_JSON)

  tags = tagsForTemplatesRepo[:json].map { |tag| Tag.new(tag["commit"]["sha"], tag["name"]) }

  all_prs_with_versions = merged_prs.map { |pr|
    correspondingTag = tags.find { |tag| tag.commit_sha == pr.merge_sha }
    PullRequestNumberWithTemplatesVersion.new(pr.number, pr.title, pr.author, pr.merge_sha, pr.merged_at, correspondingTag.templates_version)
  }

  templates_versions_included_in_git_log = find_included_templates_versions

  released_prs_with_version = all_prs_with_versions.select { |pr_with_version|
    templates_versions_included_in_git_log.include?(pr_with_version.templates_version)
  }

  UI.message("Released PRs: #{released_prs_with_version}")

  release_history = File.new("release_history.csv", "w")
  release_history.puts("pr_number,templates_version,released_to_platform,platform_release_version,merge_time,release_time,time_to_release_in_minutes")

  released_prs_with_version.map { |pr_with_version|

    merge_time = DateTime.parse(pr_with_version.merged_at)
    time_to_release = ((release_time - merge_time) * 24 * 60).to_i
    UI.message("PR #{pr_with_version.number} (templates version #{pr_with_version.templates_version}) was released to prod. Merge time: #{merge_time} | Release time: #{release_time} | Time to release: #{time_to_release} minutes")

    # Add row to the release_history csv file
    release_history.puts("#{pr_with_version.number},#{pr_with_version.templates_version},#{platform},#{build_number},#{merge_time},#{release_time},#{time_to_release}")

    if update_github
      # Label PR so that it is ignored during the next release
      UI.message("Marking PR #{pr_with_version.number} as released to production (on #{platform})")
      github_api(
        server_url: "https://api.github.com",
        api_bearer: github_token,
        http_method: "POST",
        path: "/repos/guardian/#{templates_repo}/issues/#{pr_with_version.number}}/labels",
        body: { labels: ["released_to_prod_#{platform}"] }
      )
    end

  }

  release_history.close

end
